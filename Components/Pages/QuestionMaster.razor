@page "/questions"
@using QuizGame.Data.Entities
@using QuizGame.Services
@inject IQuestionService QuestionService

@rendermode InteractiveServer

<PageTitle>Question Master</PageTitle>

<h1>Question Master</h1>

@if (_loadedQuestion != null)
{
    <p>Question #@_questionCount: @_loadedQuestion.QuestionText</p>
    
    <ul>
        @foreach(string choice in multipleChoices)
        {
            <li>@choice</li>
        }        
    </ul>

    <p>Answer: @_loadedQuestion.Answer</p>
    
    <button class="btn btn-primary" @onclick="LoadNextQuestion">Next Question</button>
}

@if (_outOfQuestions)
{
    <p> OUT OF QUESTIONS </p>
}

<h2>Current Scores</h2>
<button class="btn btn-primary" @onclick="AddNewPlayer">Add New Player</button>
<ul>
    @foreach (Player player in players)
    {
        <li>
            <p>Player @player.playerNumber: @player.Score</p>
            <button class="btn btn-primary" @onclick="() => AddScore(player)">Add Point</button>
        </li>
    }    
</ul>



@code {
    private List<Question>? _questions;
    private Question? _loadedQuestion;

    private List<string> multipleChoices {
        get
        {
            List<string> list = [.._loadedQuestion.WrongChoices, _loadedQuestion.Answer];
            var shuffledList = list.OrderBy(x => Guid.NewGuid()).ToList();
            return shuffledList;
        }
         
    } 
    private int _questionCount { get; set; } = 1;
    private bool _outOfQuestions { get; set; } = false;
    private List<Player> players { get; set; } = new List<Player>();
    private int _playerNumber { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        _questions = await QuestionService.GetAllQuestionsAsync();
        if (_questions != null) _loadedQuestion = _questions[0];
    }

    public void LoadNextQuestion()
    {
        try
        {
            _loadedQuestion = _questions[_questionCount];
            _questionCount++;
        }
        catch (ArgumentOutOfRangeException e)
        {
            _outOfQuestions = true;
        }

    }

    public void AddNewPlayer()
    {
        players.Add(new Player
        {
            playerNumber = _playerNumber
        });
        _playerNumber++;
    }

    public void AddScore(Player player)
    {
        player.Score++;
    }
    
    public class Player
    {
        public int playerNumber { get; set; }
        public int Score { get; set; } = 0;
    }

}

