@page "/single-player"
@using System.Timers
@using QuizGame.Data.Entities
@using QuizGame.Services
@inject IQuestionService QuestionService;
@rendermode InteractiveServer

@{/*
   // Change it so that there is a start game button that shows first question and starts the timer.
   // Change it so that when you hit the last question -- the timer stops and the buttons become unresponsive
   // and a new button pops up to restart the game
*/}

<h3>Single Player Mode</h3>

@if (_loadedQuestion != null)
{
    <p>Question #@_questionCount: @_loadedQuestion.QuestionText</p>

    <ul>
        @foreach(string choice in multipleChoices)
        {
            <li>
                <button class="btn btn-primary" @onclick="() => SelectAnswer(choice)">@choice</button>
            </li>
        }
    </ul>
    
    
    <Countdown @ref="timer" />
    <button @onclick="() => timer.Start(10, 200)">Restart Timer</button>


}

@if (_outOfQuestions)
{
    <p> OUT OF QUESTIONS </p>
    <p>Your score is: @_score</p>
}


@code {
    private List<Question>? _questions;
    private Question? _loadedQuestion;
    private int _questionCount { get; set; } = 1;
    private bool _outOfQuestions;
    private int _score;
    
    protected Countdown timer;
    
    private List<string> multipleChoices {
        get
        {
            List<string> list = [.._loadedQuestion.WrongChoices, _loadedQuestion.Answer];
            var shuffledList = list.OrderBy(x => Guid.NewGuid()).ToList();
            return shuffledList;
        }
    } 
    
    protected override async Task OnInitializedAsync()
    {
        _questions = await QuestionService.GetAllQuestionsAsync();
        if (_questions != null) _loadedQuestion = _questions[0];
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && timer is not null)
        {
            timer.Start(10, 200);
        }
    }

    private void TimerOutCallback()
    {
    }
    
    public void SelectAnswer(string choice)
    {
        if (choice == _loadedQuestion.Answer)
        {
            _score += timer.TimeBarWidthNumber;
        }
        
        LoadNextQuestion();
        timer.Start(10, 200);

    }

    public void LoadNextQuestion()
    {
        try
        {
            _loadedQuestion = _questions[_questionCount];
            _questionCount++;
        }
        catch (ArgumentOutOfRangeException e)
        {
            _outOfQuestions = true;
        }
    }
    
    
}
