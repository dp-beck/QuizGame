@page "/single-player"
@using System.Timers
@using QuizGame.Data.Entities
@using QuizGame.Services
@inject IQuestionService QuestionService;
@rendermode InteractiveServer

@{/*


*/}

<h3>Single Player Mode</h3>

@if (_loadedQuestion is not null && !_gameStarted)
{
    <p>Welcome to single player mode. You will have ten seconds to answer each question. 
        The quicker you answer the question, the higher your score will be. The questions are
        all multiple choice.
    </p>

    <button @onclick="StartGame">Start Game</button>    
}

@if (_loadedQuestion is not null 
     && _gameStarted
     && !_gameOver)
{
    <p>Question #@_questionCount: @_loadedQuestion.QuestionText</p>

    <ul>
        @foreach(string choice in multipleChoices)
        {
            <li>
                <button class="btn btn-primary" @onclick="() => SelectAnswer(choice)">@choice</button>
            </li>
        }
    </ul>
}

<Countdown @ref="timer" TimerOut="TimerOutCallback"/>

@if (_outOfQuestions)
{
    <p> OUT OF QUESTIONS </p>
    <p>Your score is: @_score</p>
    <button @onclick="Restart">Restart?</button>
}


@code {
    private List<Question>? _questions;
    private Question? _loadedQuestion;
    private int _questionCount { get; set; } = 1;
    private bool _outOfQuestions;
    private bool _gameStarted;
    private bool _gameOver;
    private int _score;
    
    protected Countdown timer;
    
    private List<string> multipleChoices {
        get
        {
            List<string> list = [.._loadedQuestion.WrongChoices, _loadedQuestion.Answer];
            var shuffledList = list.OrderBy(x => Guid.NewGuid()).ToList();
            return shuffledList;
        }
    } 
    
    protected override async Task OnInitializedAsync()
    {
        _questions = await QuestionService.GetAllQuestionsAsync();
        if (_questions != null) _loadedQuestion = _questions[0];
    }

    private void TimerOutCallback()
    {
        InvokeAsync(() =>
        {
            LoadNextQuestion();
            StateHasChanged();
            timer.Start(10, 200);
        });
    }

    public void StartGame()
    {
        timer.Start(10, 200);
        timer.countdownVisibility = "visible";
        _gameStarted = true;
    }
    
    public void SelectAnswer(string choice)
    {
        if (choice == _loadedQuestion.Answer)
        {
            _score += timer.TimeBarWidthNumber;
        }
        
        LoadNextQuestion();
        timer.Start(10, 200);

    }

    public void LoadNextQuestion()
    {
        try
        {
            _loadedQuestion = _questions[_questionCount];
            _questionCount++;
        }
        catch (ArgumentOutOfRangeException e)
        {
            _outOfQuestions = true;
            _gameOver = true;
            timer.countdownVisibility = "hidden";
            timer.Stop();
        }
    }

    public void Restart()
    {
        _gameStarted = true;
        _gameOver = false;
        _outOfQuestions = false;
        _score = 0;
        timer.Start(10, 200);
        timer.countdownVisibility = "visible";
        _questionCount = 0;
        _questions = _questions.OrderBy(x => Guid.NewGuid()).ToList();
        LoadNextQuestion();
    }
    
}
